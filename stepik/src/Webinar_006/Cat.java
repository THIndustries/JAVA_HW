package Webinar_006;

import java.util.ArrayList;
import java.util.List;

public class Cat {
    //-------------------------------------------------------------------------
        /*
        Задание 1.
    Продумайте структуру класса Кот. Какие поля и методы будут актуальны для приложения, которое является
    а) информационной системой ветеринарной клиники
    б) архивом выставки котов
    в) инормационной системой Театра кошек
    Можно записать в текстовом виде, не обязательно реализовывать в Java.

    1. Реализуйте 1 из вариантов класса Cat из предыдущего задания, можно использовать не все придуманные поля
    и методы. Создайте несколько экземпляров этого класса, выведите их в консоль.
    2. Добейтесь того, чтобы при выводе в консоль обьект типа Cat, выводилась его кличка, цвет и возраст.
     */
    //-------------------------------------------------------------------------
    /*
    Задание 2.
    1)Создайте множество, в котором будут храниться экземплятры класа Cat - HashSet<Cat>.
    Поместите в него некоторые кол-во обьектов.
    2)Создайте 2 или более котов с одинаковыми параметрами в полях. Поместите их во множество.
    Убедитесь, что все они сохрагнились во множество.
    3. Создайте метод public boolean equals(Object o)
    Пропишите в нем логику сравнения котов по параметрам, хранимым в полях.
    То есть, метод должен возвращать true, только если значения во всех полях сравниваемых обьектов равны.
    4. Выведите снова содержимое множества из пункта 2, убедитесь, что дубликаты удалились.
     */

    //тут мы не будем создавать метод main (точка входа) тут не будет static

    //Описываем поля, которые будут присущи нащему обьекту:
    private String name; //cкрываем поле класса с помощью ключевого слова private
    private int  age;
    private String owner;//Мы бы могли создать свой класс Owner, который описывал бы свое множество полей.
    private String poroda;
    private List<String> helthHistory;

    //-------------------------------------------------------------------------
    //Обьект любого класса надо иметь возможность создвать.
    //Если мы его не пишем, то JAVA это пишет за нас по умолчанию.
    //Напишем свой собственный конструктор (тот что new Cat();)
    //Например, мы хотим, чтобы при создании кошки, сразу указывали знаачения из первых четырех полей.
    Cat(String name, int age, String owner, String poroda) {//метод называется так же, как наш класс.
        // Методы всегда с большой буквы. Ему не надо указывать void
        //его единственная задача, это создать обьект. Указываем только что метод принимает на вход.
        //Теперь, в самом методе, присваиваем значения(аргументы), которые пришли в наш метод, в сами методы:
        this.name = name;
        this.age = age;
        this.owner = owner;
        this.poroda = poroda;
        helthHistory = new ArrayList<>();//Создаем наш список с историей болезней отдельно. На вход не идет
        //соответствующий аргумент, лист будет создан по умолчанию, чтобы с ним можно было работать дальше.
    }
    //-------------------------------------------------------------------------
    //1. Мы скрыли наши поля с помошью private, но теперьмы не можем обратиться к ним.
    //Это можно обойти с помощью гетеров. Это методы, которые возвращают нам значения.
    //2. Создадим эти гетеры:

    public String getName() {//гетер поля name
        return name;//Теперь этот функционал будет присутствоать у нашего обьекта.
    }

    public String getPoroda() {
        return poroda;
    }

    //-------------------------------------------------------------------------
    //Мы научились возвращать приватное поле с помощью гетера.
    //А как присвоить полю значение?
    //Использовать сетеры:

    public void setName(String name) {//Написали метод, который называется схоже с полем.
        //метод принимает значение и сохраняет его в поле:
        this.name = name;//появляется ключевое слово this. чтобы отличить "имя" поля класси и переменной,
        // который принимается на вход как аргумент. Имена у них одинаковые.
        //this.name - это ссылка на поле класса.
    }
    //-------------------------------------------------------------------------
    //Напишем метод, который будет выодить всю информацию об обьекте:
    //В классе Object есть метод toString():
    @Override
    public String toString() {
        //return super.toString();//super - обращение к родительскому классу. Убираем реализацию по умолчанию.
        //Напишем реализацию, которая будет возвращать то, что нам нужно - четыре поля:
        return "name: " + name + ", age: " + age + ", owner: " + owner + ", poroda: " + poroda;

    }

    //-------------------------------------------------------------------------
    //Переписываем equals для наших котиков:

    @Override
    public boolean equals(Object obj) {//метод будет проверять, не существует ли уже котик:
        if (this == obj)
            return true;
        if (!(obj instanceof Cat))
            return false;
        Cat cat = (Cat) obj;
        if (name.equalsIgnoreCase(cat.name) &&
                age == cat.age &&
                owner.equals(cat.owner) &&
                poroda.equals(cat.poroda))
            return true;
        else
            return false;
    }

    @Override
        public int hashCode() {
            return name.hashCode() + 7*age + 11*owner.hashCode() + 17*poroda.hashCode();
        }

    }


    //Почему мы скрыли поля класса, а потом написали метод, чтобы к ним обратиться - обьяснят на ООП.

